/* Generated by RuntimeBrowser
   Image: /Library/Developer/CoreSimulator/Volumes/iOS_21A328/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.0.simruntime/Contents/Resources/RuntimeRoot/System/Library/PrivateFrameworks/BiomeStorage.framework/BiomeStorage
 */

@interface BMFrameStore : NSObject {
    BMFileHandle * _backingFile;
    NSString * _cachedPrintablePath;
    NSString * _cachedPrintablePathV2;
    unsigned int  _datastoreVersion;
    bool  _filterByAgeOnRead;
    NSMutableOrderedSet * _framePointers;
    unsigned long long  _frameStoreSize;
    BMMemoryMapping * _frames;
    BMMemoryMapping * _header;
    double  _lastAbsoluteTimestamp;
    double  _maxAge;
    unsigned long long  _permission;
    bool  _pruneOnAccess;
}

@property (nonatomic, readonly) BMFileHandle *backingFile;
@property (readonly) unsigned int bytesUsed;
@property (nonatomic, retain) NSString *cachedPrintablePathV2;
@property (nonatomic) unsigned int datastoreVersion;
@property (nonatomic) bool filterByAgeOnRead;
@property (nonatomic) unsigned long long frameStoreSize;
@property (nonatomic, retain) BMMemoryMapping *frames;
@property (nonatomic, retain) BMMemoryMapping *header;
@property (nonatomic) double lastAbsoluteTimestamp;
@property (nonatomic) double maxAge;
@property (nonatomic) unsigned long long permission;
@property (nonatomic) bool pruneOnAccess;
@property (nonatomic, readonly) NSString *segmentName;
@property (nonatomic, readonly) NSString *segmentPath;

+ (bool)expectedTimestamp:(double)arg1;
+ (unsigned int)getSegmentVersion:(id)arg1 config:(id)arg2 stream:(id)arg3;
+ (unsigned long long)maxEventsPerFrameStoreVersion:(unsigned long long)arg1 averageEventSize:(unsigned long long)arg2 segmentSize:(unsigned long long)arg3;
+ (id)new;
+ (bool)writeEmptyFrameStoreWithFileHandle:(id)arg1 fileSize:(unsigned long long)arg2 datastoreVersion:(unsigned long long)arg3;
+ (bool)writeEmptySegmentHeaderWithFileHandleV1:(id)arg1 segmentHeaderSize:(unsigned long long*)arg2;

- (void).cxx_destruct;
- (id)_printablePath;
- (unsigned char)appendFrameHeaderV1:(struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; unsigned int x_2_1_3; unsigned int x_2_1_4; } x2; }*)arg1 offset:(unsigned long long*)arg2;
- (id)backingFile;
- (id)cachedPrintablePathV2;
- (unsigned int)datastoreVersion;
- (void)dealloc;
- (void)enumerateFromOffset:(unsigned long long)arg1 withCallback:(id /* block */)arg2;
- (void)enumerateWithOptions:(unsigned long long)arg1 fromOffset:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateWithOptionsV1:(unsigned long long)arg1 fromOffset:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (bool)filterByAgeOnRead;
- (unsigned long long)frameStoreSize;
- (id)frameWithOffset:(unsigned long long)arg1 expectedState:(unsigned int)arg2;
- (id)frameWithOffsetV1:(unsigned long long)arg1 expectedState:(unsigned int)arg2;
- (id)frames;
- (long long)getReverseOffsetIndex:(unsigned long long)arg1;
- (bool)getSegmentHeader:(union { struct { unsigned long long x_1_1_1[2]; unsigned int x_1_1_2; } x1; struct { unsigned long long x_2_1_1; double x_2_1_2; unsigned int x_2_1_3; BOOL x_2_1_4[32]; BOOL x_2_1_5[4]; } x2; struct { BOOL x_3_1_1[4]; unsigned int x_3_1_2; double x_3_1_3; unsigned int x_3_1_4; int x_3_1_5; unsigned int x_3_1_6; unsigned int x_3_1_7; } x3; }*)arg1 fromFileV1:(id)arg2 fileSize:(unsigned long long*)arg3;
- (id)header;
- (id)init;
- (id)initWithFileHandle:(id)arg1 permission:(unsigned long long)arg2 datastoreVersion:(unsigned long long)arg3;
- (id)initWithFileHandleV1:(id)arg1 permission:(unsigned long long)arg2;
- (bool)isValidFrameV1:(void*)arg1 expectedState:(unsigned int)arg2 copyOfData:(id*)arg3 frameStatus:(struct { unsigned int x1; unsigned int x2; })arg4 validations:(bool)arg5 enumerationOptions:(unsigned long long)arg6 errorCode:(int*)arg7;
- (double)lastAbsoluteTimestamp;
- (void)markFrameAsRemoved:(id)arg1;
- (void)markFrameAsRemovedV1:(id)arg1;
- (double)maxAge;
- (bool)offsetIsStartOfFrameStore:(unsigned long long)arg1;
- (unsigned long long)permission;
- (bool)pruneOnAccess;
- (id)segmentName;
- (id)segmentPath;
- (void)setBackingFile:(id)arg1;
- (void)setCachedPrintablePathV2:(id)arg1;
- (void)setDatastoreVersion:(unsigned int)arg1;
- (void)setFilterByAgeOnRead:(bool)arg1;
- (void)setFrameStoreSize:(unsigned long long)arg1;
- (void)setFrames:(id)arg1;
- (void)setHeader:(id)arg1;
- (void)setLastAbsoluteTimestamp:(double)arg1;
- (void)setMaxAge:(double)arg1;
- (void)setPermission:(unsigned long long)arg1;
- (void)setPruneOnAccess:(bool)arg1;
- (void*)start;
- (void)sync;
- (void)updateFrameStoreIndex;
- (void)updateHeader;
- (unsigned char)writeFrameForBytes:(const void*)arg1 length:(unsigned long long)arg2 dataVersion:(unsigned int)arg3 timestamp:(double)arg4;
- (unsigned char)writeFrameForBytes:(const void*)arg1 length:(unsigned long long)arg2 dataVersion:(unsigned int)arg3 timestamp:(double)arg4 outOffset:(unsigned long long*)arg5;
- (unsigned char)writeFrameV1ForBytes:(const void*)arg1 length:(unsigned long long)arg2 dataVersion:(unsigned int)arg3 timestamp:(double)arg4 outOffset:(unsigned long long*)arg5;

// BMFrameStore (Inspection)

- (unsigned int)bytesUsed;
- (unsigned int)bytesUsedV1;
- (unsigned int)bytesUsedV2;
- (bool)isCheckSumValidAtOffsetV1:(unsigned long long)arg1;

// BMFrameStore (V2)

+ (bool)writeEmptySegmentHeaderWithFileHandleV2:(id)arg1 segmentHeaderSize:(unsigned long long*)arg2;

- (id)_printablePathV2;
- (void)addToDeletedFrameCount:(unsigned int)arg1;
- (void)addToValueAtOffset:(unsigned int)arg1 increment:(unsigned int)arg2;
- (unsigned char)appendOffsetTableEntry:(struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; double x2; }*)arg1 outOffsetForFrame:(unsigned int*)arg2 length:(unsigned int)arg3 frameCount:(unsigned int*)arg4;
- (unsigned int)atomicReadTotalFramesV2;
- (double)creationTimeOfFrameV2:(unsigned int)arg1;
- (unsigned int)endOfFrameDataV2;
- (void)enumerateWithOptionsV2:(unsigned long long)arg1 fromOffset:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (int)eraseFrameAtOffsetTableV2:(struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; double x2; }*)arg1;
- (int)firstFrameNumberForTimestampV2:(double)arg1 reverse:(bool)arg2;
- (int)frameNumberFromFrameOffsetV2:(unsigned int)arg1;
- (int)frameNumberFromOffsetToOffsetTableEntryV2:(unsigned int)arg1;
- (unsigned int)frameOffsetFromOffsetTableV2:(struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; double x2; }*)arg1;
- (id)frameWithOffsetV2:(unsigned long long)arg1 expectedState:(unsigned int)arg2;
- (bool)getSegmentHeader:(union { struct { unsigned long long x_1_1_1[2]; unsigned int x_1_1_2; } x1; struct { unsigned long long x_2_1_1; double x_2_1_2; unsigned int x_2_1_3; BOOL x_2_1_4[32]; BOOL x_2_1_5[4]; } x2; struct { BOOL x_3_1_1[4]; unsigned int x_3_1_2; double x_3_1_3; unsigned int x_3_1_4; int x_3_1_5; unsigned int x_3_1_6; unsigned int x_3_1_7; } x3; }*)arg1 fromFileV2:(id)arg2 fileSize:(unsigned long long*)arg3;
- (id)initWithFileHandleV2:(id)arg1 permission:(unsigned long long)arg2;
- (bool)isCheckSumValidAtOffsetV2:(unsigned long long)arg1 frameNumber:(int)arg2;
- (bool)isValidFrameV2:(void*)arg1 currentFrame:(unsigned int)arg2 expectedState:(unsigned int)arg3 copyOfData:(id*)arg4 frameState:(unsigned int)arg5 frameSize:(unsigned int)arg6 validations:(bool)arg7 enumerationOptions:(unsigned long long)arg8 errorCode:(int*)arg9;
- (void)markFrameAsRemovedV2:(id)arg1;
- (unsigned int)offsetOfFrameV2:(unsigned int)arg1;
- (unsigned int)offsetTableOffsetFromFrameNumberV2:(unsigned int)arg1;
- (struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; double x2; }*)offsetTablePtrFromFrameNumberV2:(unsigned int)arg1;
- (unsigned int)sizeOfFrameV2:(unsigned int)arg1;
- (unsigned int)stateOfFrameV2:(unsigned int)arg1;
- (void)updateHighestDeletedFrame:(id)arg1;
- (void)updateHighestDeletedFrameV2:(id)arg1 addToDeletedFrameCount:(unsigned int)arg2;
- (void)updateToMaxOfHighestDeletedFrameAnd:(unsigned int)arg1;
- (void)updateToMaxOfTotalFramesAnd:(unsigned int)arg1;
- (void)updateToMaxOfValueAtOffset:(unsigned int)arg1 newValue:(int)arg2;
- (unsigned char)writeFrameV2ForBytes:(const void*)arg1 length:(unsigned long long)arg2 dataVersion:(unsigned int)arg3 timestamp:(double)arg4 outOffset:(unsigned long long*)arg5;

@end
